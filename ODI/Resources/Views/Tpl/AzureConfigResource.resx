<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Accountname" xml:space="preserve">
    <value>accountname</value>
  </data>
  <data name="AddTheDownloadedCertificate" xml:space="preserve">
    <value>Add the downloaded certificate to your Windows Azure Managment Console. Click &lt;a href="#" data-toggle="modal"
                            data-target="#add-certificate" id="cert-doc-link"&gt;here&lt;/a&gt; for details on uploading the certificated.</value>
  </data>
  <data name="AutomatedInstaller" xml:space="preserve">
    <value>Automated Installer</value>
  </data>
  <data name="AzureConfig" xml:space="preserve">
    <value>Azure Config</value>
  </data>
  <data name="AzureInfo" xml:space="preserve">
    <value>Azure Info</value>
  </data>
  <data name="ClickToSeeHow" xml:space="preserve">
    <value>Click to see how</value>
  </data>
  <data name="ConfigureComponents" xml:space="preserve">
    <value>Configure Components</value>
  </data>
  <data name="Continue" xml:space="preserve">
    <value>Continue</value>
  </data>
  <data name="FinalizeInstallProcedure" xml:space="preserve">
    <value>Finalize install procedure</value>
  </data>
  <data name="FinallyWeRequireTheCredentials" xml:space="preserve">
    <value>Finally we require the credentials for your Azure Table Storage for the subscription
                    that we will be deploying to so that we can move the packages properly to Azure
                    to be deployed.  If you have not created a table storage account click &lt;a href="#" data-toggle="modal" data-target="#createTableStorage"&gt;here&lt;/a&gt; for details on how to create one.</value>
  </data>
  <data name="GoBack" xml:space="preserve">
    <value>Go Back</value>
  </data>
  <data name="IfYouWouldRatherUseManualInstall" xml:space="preserve">
    <value>If you would rather use the manual install, simply click the skip button below.
                If you would like to use the automated installation please follow the instructions
                below.</value>
  </data>
  <data name="Install" xml:space="preserve">
    <value>Install</value>
  </data>
  <data name="InstallationTypes" xml:space="preserve">
    <value>Installation Types</value>
  </data>
  <data name="LongKeyString" xml:space="preserve">
    <value>long key string</value>
  </data>
  <data name="ManualInstaller" xml:space="preserve">
    <value>Manual Installer</value>
  </data>
  <data name="NoteTheInstallerCanAutomatically" xml:space="preserve">
    <value>&lt;strong&gt;NOTE:&lt;/strong&gt; The Installer can automatically deploy your package(s) for
                you, but you MUST install a generated certificate into the Azure Management Console.
                The deploy process will check your Azure account for a certificate, and will not
                move on to the next step unless there’s a certificate.</value>
  </data>
  <data name="ODPICanAutomaticallyDeploy" xml:space="preserve">
    <value>ODPI can automatically deploy your package(s) for you but you first must follow these steps.</value>
  </data>
  <data name="ODPIHasTwoWays" xml:space="preserve">
    <value>ODPI has two ways to configure and install your components onto the Windows Azure
                platform.</value>
  </data>
  <data name="OnceYouHaveDownloadedAndUploaded" xml:space="preserve">
    <value>Once you have downloaded and uploaded the certificate, enter your Subscription ID
                    found on the Management Console.  Click &lt;a href="#" data-toggle="modal" data-target="#subscriptionIdHelp"&gt;here&lt;/a&gt; for details on getting your subscription ID.</value>
  </data>
  <data name="PrimaryAccessKey" xml:space="preserve">
    <value>Primary Access Key</value>
  </data>
  <data name="Progress" xml:space="preserve">
    <value>Progress:</value>
  </data>
  <data name="SelectComponentsToInstall" xml:space="preserve">
    <value>Select components to install</value>
  </data>
  <data name="Skip" xml:space="preserve">
    <value>Skip</value>
  </data>
  <data name="StartByDownloading" xml:space="preserve">
    <value>Start by downloading this &lt;a id="certlink" href="/Auto/Certificate?fileName="&gt;Generated
                        Certificate&lt;/a&gt; and saving it on your local computer.  Remember the location you saved it to.</value>
  </data>
  <data name="StorageAccountName" xml:space="preserve">
    <value>Storage Account Name</value>
  </data>
  <data name="SubscriptionId" xml:space="preserve">
    <value>Subscription Id</value>
  </data>
  <data name="SubscriptionKeyForAzure" xml:space="preserve">
    <value>subscription key for azure</value>
  </data>
  <data name="TheAutomatedInstallerWillAllow" xml:space="preserve">
    <value>The Automated installer will allow you to double check all of your configuration
                prior to Automatically installing the package to save you the most time.</value>
  </data>
  <data name="TheManualInstallerIsTheAlternative" xml:space="preserve">
    <value>The Manual installer is the alternative means for using ODPI, where we never need
                to know anything about your Azure instance. The drawback to this method is that
                you will have to ensure that all of your configuration is correct ahead of time
                as well as manually upload and deploy the packages using the Azure Managment
                Console.</value>
  </data>
</root>