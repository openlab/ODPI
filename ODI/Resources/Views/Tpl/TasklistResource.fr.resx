<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BeforeYouStart" xml:space="preserve">
    <value>Avant de commencer</value>
  </data>
  <data name="BeforeYouStartTheProcess" xml:space="preserve">
    <value>Avant de commencer le processus d'installation d'un produit inclut dans l'Open Data Platform Installer, il y a quelques prérequis nécessaires à l'utilisation de l'outil. &lt;a id="showMore"&gt;En savoir plus&lt;/a&gt;</value>
  </data>
  <data name="ConfigureComponents" xml:space="preserve">
    <value>Configuration des Composants</value>
  </data>
  <data name="Continue" xml:space="preserve">
    <value>Continuer</value>
  </data>
  <data name="FinalizeInstallProcedure" xml:space="preserve">
    <value>Finalisation de la procédure d'installation</value>
  </data>
  <data name="GoBack" xml:space="preserve">
    <value>Précédent</value>
  </data>
  <data name="HostedService" xml:space="preserve">
    <value>Service Hébergé</value>
  </data>
  <data name="IfYouDontAlreadyHaveAWindowsAzure" xml:space="preserve">
    <value>Si vous ne possédez pas encore de compte Windows Azure, vous pouvez en créer un sur &lt;a href="http://www.windowsazure.com"
                            target="_blank"&gt;www.windowsazure.com&lt;/a&gt;. Vous y trouverez toutes les informations et étapes requises à la création d'un compte.</value>
  </data>
  <data name="Install" xml:space="preserve">
    <value>Installation</value>
  </data>
  <data name="ManagementCertificates" xml:space="preserve">
    <value>Certificats de Gestion</value>
  </data>
  <data name="OnceYourAccountIsCreated" xml:space="preserve">
    <value>Une fois votre compte créé, vous devez créer un Service Hébergé sur votre abonnement Windows Azure afin d'y déployer les produits. Ce Service Hébergé doit être vide. Dans le cas contraire vous ne pourrez pas déployer via l'Open Data Platform Installer.</value>
  </data>
  <data name="OpenDataPlatformInstalled" xml:space="preserve">
    <value>Open Data Platform Installer pour Windows Azure</value>
  </data>
  <data name="Progress" xml:space="preserve">
    <value>Progression :</value>
  </data>
  <data name="SelectComponentsToInstall" xml:space="preserve">
    <value>Sélection des composants à installer</value>
  </data>
  <data name="StorageAccount" xml:space="preserve">
    <value>Compte de Stockage</value>
  </data>
  <data name="TheOpenDataPlatformInstallerODPI" xml:space="preserve">
    <value>L'Open Data Platform Installer (ODPI) permet à toutes personnes, même les moins techniques, d'obtenir une collection personnalisée d'applications Open Data installées et fonctionnant sur Windows Azure en remplissant un minimum d'informations.</value>
  </data>
  <data name="TheOpenDataPlatformInstallerRequires" xml:space="preserve">
    <value>L'Open Data Platform Installer nécessite un compte de stockage pour stocker temporairement les paquets lors du déploiement. Ces paquets seront supprimés mais le compte de stockage restera présent. Nous vous expliquerons comment créer un compte de stockage quand vous en aurez besoin. Cependant si vous désirez en créer un cliquez &lt;a href="#" data-toggle="modal" data-target="#createTableStorage"&gt;
ici&lt;/a&gt;</value>
  </data>
  <data name="ToAllowOpenDataPlatformInstaller" xml:space="preserve">
    <value>Afin d'autoriser Open Data Platform Installer à accéder à votre compte Windows Azure, il vous sera demandé d'ajouter temporairement un certificat sur votre compte Windows Azure. Ne vous inquiétez pas, nous nous occupons de créer automatiquement  les certificats. De même nous vous montrerons en temps voulu comment ajouter le certificat sur votre compte Azure.</value>
  </data>
  <data name="WindowsAzureAccount" xml:space="preserve">
    <value>Compte Windows Azure</value>
  </data>
  <data name="YouMustAlsoCreate" xml:space="preserve">
    <value>Vous devez aussi créer un Service Hébergé différent pour chaque produit que vous souhaitez installer. Réferrez-vous au lien suivant pour savoir &lt;a href="#" data-toggle="modal" data-target="#CreateHostedService" rel="tooltip"
                        data-original-title="Cliquer pour voir comment"&gt;Comment créer un Service Hébergé&lt;/a&gt;</value>
  </data>
</root>